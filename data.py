import chessboard
import random
class Data:
    def __init__(self, value, index):
        self.value = value
        self.index = index

        self.color = "#B5B5B5"  # default grey
        if index < 1024 and index != -1:
            self.color = self.getColor()

    def getColor(self):

        # colors = ['#FFFAFA', '#BBFFFF', '#F8F8FF', '#AEEEEE', '#F5F5F5', '#96CDCD', '#DCDCDC', '#668B8B', '#FFFAF0', '#98F5FF', '#FDF5E6', '#8EE5EE', '#FAF0E6', '#7AC5CD', '#FAEBD7', '#53868B', '#FFEFD5', '#00F5FF', '#FFEBCD', '#00E5EE', '#FFE4C4', '#00C5CD', '#FFDAB9', '#00868B', '#FFDEAD', '#00FFFF', '#FFE4B5', '#00EEEE', '#FFF8DC', '#00CDCD', '#FFFFF0', '#008B8B', '#FFFACD', '#97FFFF', '#FFF5EE', '#8DEEEE', '#F0FFF0', '#79CDCD', '#F5FFFA', '#528B8B', '#F0FFFF', '#7FFFD4', '#F0F8FF', '#76EEC6', '#E6E6FA', '#66CDAA', '#FFF0F5', '#458B74', '#FFE4E1', '#C1FFC1', '#FFFFFF', '#B4EEB4', '#000000', '#9BCD9B', '#2F4F4F', '#698B69', '#696969', '#54FF9F', '#708090', '#4EEE94', '#778899', '#43CD80', '#BEBEBE', '#2E8B57', '#D3D3D3', '#9AFF9A', '#191970', '#90EE90', '#000080', '#7CCD7C', '#6495ED', '#548B54', '#483D8B', '#00FF7F', '#6A5ACD', '#00EE76', '#7B68EE', '#00CD66', '#8470FF', '#008B45', '#0000CD', '#00FF00', '#4169E1', '#00EE00', '#0000FF', '#00CD00', '#1E90FF', '#008B00', '#00BFFF', '#7FFF00', '#87CEEB', '#76EE00', '#87CEFA', '#66CD00', '#4682B4', '#458B00', '#B0C4DE', '#C0FF3E', '#ADD8E6', '#B3EE3A', '#B0E0E6', '#9ACD32', '#AFEEEE', '#698B22', '#00CED1', '#CAFF70', '#48D1CC', '#BCEE68', '#40E0D0', '#A2CD5A', '#00FFFF', '#6E8B3D', '#E0FFFF', '#FFF68F', '#5F9EA0', '#EEE685', '#66CDAA', '#CDC673', '#7FFFD4', '#8B864E', '#006400', '#FFEC8B', '#556B2F', '#EEDC82', '#8FBC8F', '#CDBE70', '#2E8B57', '#8B814C', '#3CB371', '#FFFFE0', '#20B2AA', '#EEEED1', '#98FB98', '#CDCDB4', '#00FF7F', '#8B8B7A', '#7CFC00', '#FFFF00', '#00FF00', '#EEEE00', '#7FFF00', '#CDCD00', '#00FA9A', '#8B8B00', '#ADFF2F', '#FFD700', '#32CD32', '#EEC900', '#9ACD32', '#CDAD00', '#228B22', '#8B7500', '#6B8E23', '#FFC125', '#BDB76B', '#EEB422', '#EEE8AA', '#CD9B1D', '#FAFAD2', '#8B6914', '#FFFFE0', '#FFB90F', '#FFFF00', '#EEAD0E', '#FFD700', '#CD950C', '#EEDD82', '#8B658B', '#DAA520', '#FFC1C1', '#B8860B', '#EEB4B4', '#BC8F8F', '#CD9B9B', '#CD5C5C', '#8B6969', '#8B4513', '#FF6A6A', '#A0522D', '#EE6363', '#CD853F', '#CD5555', '#DEB887', '#8B3A3A', '#F5F5DC', '#FF8247', '#F5DEB3', '#EE7942', '#F4A460', '#CD6839', '#D2B48C', '#8B4726', '#D2691E', '#FFD39B', '#B22222', '#EEC591', '#A52A2A', '#CDAA7D', '#E9967A', '#8B7355', '#FA8072', '#FFE7BA', '#FFA07A', '#EED8AE', '#FFA500', '#CDBA96', '#FF8C00', '#8B7E66', '#FF7F50', '#FFA54F', '#F08080', '#EE9A49', '#FF6347', '#CD853F', '#FF4500', '#8B5A2B', '#FF0000', '#FF7F24', '#FF69B4', '#EE7621', '#FF1493', '#CD661D', '#FFC0CB', '#8B4513', '#FFB6C1', '#FF3030', '#DB7093', '#EE2C2C', '#B03060', '#CD2626', '#C71585', '#8B1A1A', '#D02090', '#FF4040', '#FF00FF', '#EE3B3B', '#EE82EE', '#CD3333', '#DDA0DD', '#8B2323', '#DA70D6', '#FF8C69', '#BA55D3', '#EE8262', '#9932CC', '#CD7054', '#9400D3', '#8B4C39', '#8A2BE2', '#FFA07A', '#A020F0', '#EE9572', '#9370DB', '#CD8162', '#D8BFD8', '#8B5742', '#FFFAFA', '#FFA500', '#EEE9E9', '#EE9A00', '#CDC9C9', '#CD8500', '#8B8989', '#8B5A00', '#FFF5EE', '#FF7F00', '#EEE5DE', '#EE7600', '#CDC5BF', '#CD6600', '#8B8682', '#8B4500', '#FFEFDB', '#FF7256', '#EEDFCC', '#EE6A50', '#CDC0B0', '#CD5B45', '#8B8378', '#8B3E2F', '#FFE4C4', '#FF6347', '#EED5B7', '#EE5C42', '#CDB79E', '#CD4F39', '#8B7D6B', '#8B3626', '#FFDAB9', '#FF4500', '#EECBAD', '#EE4000', '#CDAF95', '#CD3700', '#8B7765', '#8B2500', '#FFDEAD', '#FF0000', '#EECFA1', '#EE0000', '#CDB38B', '#CD0000', '#8B795E', '#8B0000', '#FFFACD', '#FF1493', '#EEE9BF', '#EE1289', '#CDC9A5', '#CD1076', '#8B8970', '#8B0A50', '#FFF8DC', '#FF6EB4', '#EEE8CD', '#EE6AA7', '#CDC8B1', '#CD6090', '#8B8878', '#8B3A62', '#FFFFF0', '#FFB5C5', '#EEEEE0', '#EEA9B8', '#CDCDC1', '#CD919E', '#8B8B83', '#8B636C', '#F0FFF0', '#FFAEB9', '#E0EEE0', '#EEA2AD', '#C1CDC1', '#CD8C95', '#838B83', '#8B5F65', '#FFF0F5', '#FF82AB', '#EEE0E5', '#EE799F', '#CDC1C5', '#CD6889', '#8B8386', '#8B475D', '#FFE4E1', '#FF34B3', '#EED5D2', '#EE30A7', '#CDB7B5', '#CD2990', '#8B7D7B', '#8B1C62', '#F0FFFF', '#FF3E96', '#E0EEEE', '#EE3A8C', '#C1CDCD', '#CD3278', '#838B8B', '#8B2252', '#836FFF', '#FF00FF', '#7A67EE', '#EE00EE', '#6959CD', '#CD00CD', '#473C8B', '#8B008B', '#4876FF', '#FF83FA', '#436EEE', '#EE7AE9', '#3A5FCD', '#CD69C9', '#27408B', '#8B4789', '#0000FF', '#FFBBFF', '#0000EE', '#EEAEEE', '#0000CD', '#CD96CD', '#00008B', '#8B668B', '#1E90FF', '#E066FF', '#1C86EE', '#D15FEE', '#1874CD', '#B452CD', '#104E8B', '#7A378B', '#63B8FF', '#BF3EFF', '#5CACEE', '#B23AEE', '#4F94CD', '#9A32CD', '#36648B', '#68228B', '#00BFFF', '#9B30FF', '#00B2EE', '#912CEE', '#009ACD', '#7D26CD', '#00688B', '#551A8B', '#87CEFF', '#AB82FF', '#7EC0EE', '#9F79EE', '#6CA6CD', '#8968CD', '#4A708B', '#5D478B', '#B0E2FF', '#FFE1FF', '#A4D3EE', '#EED2EE', '#8DB6CD', '#CDB5CD', '#607B8B', '#8B7B8B', '#C6E2FF', '#1C1C1C', '#B9D3EE', '#363636', '#9FB6CD', '#4F4F4F', '#6C7B8B', '#696969', '#CAE1FF', '#828282', '#BCD2EE', '#9C9C9C', '#A2B5CD', '#B5B5B5', '#6E7B8B', '#CFCFCF', '#BFEFFF', '#E8E8E8', '#B2DFEE', '#A9A9A9', '#9AC0CD', '#00008B', '#68838B', '#008B8B', '#E0FFFF', '#8B008B', '#D1EEEE', '#8B0000', '#B4CDCD', '#7A8B8B', '#90EE90']
        if self.index == -1:
            return "#B5B5B5"
        colors = ['#8B8B00', '#8A2BE2', '#4169E1', '#FFB90F', '#FFA500', '#BA55D3', '#90EE90', '#87CEEB', '#3A5FCD', '#FF4500', '#8B4500', '#EEB422', '#548B54', '#CD5555', '#CDCD00', '#8B1A1A', '#00CD66', '#FF1493', '#528B8B', '#698B69', '#CD3333', '#DB7093', '#473C8B', '#CD8500', '#7CCD7C', '#FF7F50', '#4F94CD', '#009ACD', '#FFC0CB', '#B452CD', '#104E8B', '#CD3700', '#9BCD9B', '#1E90FF', '#FFA07A', '#FF7F00', '#AFEEEE', '#4876FF', '#6A5ACD', '#00EEEE', '#7A378B', '#CD4F39', '#00868B', '#CD96CD', '#8DEEEE', '#FF00FF', '#CD6600', '#B0E0E6', '#C71585', '#EE7600', '#8B3626', '#00FFFF', '#E9967A', '#36648B', '#D02090', '#9370DB', '#8B658B', '#54FF9F', '#2E8B57', '#FF00FF', '#EEB4B4', '#483D8B', '#FF6A6A', '#00FF00', '#ADD8E6', '#8B7500', '#00CDCD', '#EE6363', '#EE0000', '#CD950C', '#E066FF', '#FF0000', '#7A67EE', '#FF6347', '#FF8C69', '#8B4C39', '#8470FF', '#7B68EE', '#8B3E2F', '#0000FF', '#D15FEE', '#27408B', '#76EE00', '#EEC900', '#CD8162', '#B0C4DE', '#EE9A00', '#4682B4', '#FF8C00', '#FFA500', '#EE2C2C', '#00C5CD', '#B4EEB4', '#00008B', '#CD2626', '#008B45', '#7D26CD', '#6959CD', '#DB7093', '#D02090', '#0000CD', '#BF3EFF', '#48D1CC', '#00FF7F', '#8B6914', '#CD9B9B', '#FF6347', '#B03060', '#8B4789', '#76EEC6', '#DA70D6', '#FFC1C1', '#CDAD00', '#EE4000', '#436EEE', '#43CD80', '#00EE76', '#1874CD', '#00FFFF', '#FFB6C1', '#0000FF', '#00B2EE', '#EE9572', '#FFA07A', '#EEAEEE', '#FFD700', '#00CED1', '#6495ED', '#68228B', '#836FFF', '#FA8072', '#C71585', '#C1FFC1', '#7FFF00', '#9400D3', '#00CD00', '#D2691E', '#EE8262', '#008B00', '#CD0000', '#40E0D0', '#8B2323', '#F08080', '#4EEE94', '#CD661D', '#8B3A3A', '#FF7256', '#912CEE', '#66CDAA', '#8B5742', '#8B6969', '#1E90FF', '#CD8500', '#00BFFF', '#B23AEE', '#00F5FF', '#EE3B3B', '#8B668B', '#8B2500', '#CD7054', '#9B30FF', '#97FFFF', '#CD9B1D', '#00BFFF', '#00EE00', '#7FFFD4', '#EE6A50', '#EEAD0E', '#FFBBFF', '#FFA500', '#EEEE00', '#008B8B', '#79CDCD', '#FF0000', '#87CEFA', '#FF4040', '#1C86EE', '#EE7621', '#B03060', '#63B8FF', '#FFC125', '#EE82EE', '#0000EE', '#8B4513', '#FF3030', '#8B5A00', '#EE9A00', '#DDA0DD', '#FF4500', '#9AFF9A', '#CD5B45', '#FF69B4', '#00E5EE', '#0000CD', '#EE5C42', '#9A32CD', '#5CACEE', '#A020F0', '#A52A2A', '#9932CC', '#B22222']
        # print(f"value: {self.value}, color: {colors[self.index % len(colors)]}")
        return colors[self.index % len(colors)]

class Event:
    def __init__(self, type: str, blockGroups: list[list[chessboard.ChessBlock]]):
        self.eventType = type
        self.relativeBlockGroups = blockGroups

        self.isValidEvent = False
        if len(self.relativeBlockGroups) > 0 or self.eventType != "":
            self.isValidEvent = True

class DataProcess:
    def __init__(self):
        self.dataIndex = ['', '1', '2', '4', '8', '16', '32', '64', '128', '256', '512', '1024', '2048', '4096', '8192', '1a', '3a', '6a', '13a', '26a', '52a', '104a', '209a', '419a', '838a', '1b', '3b', '6b', '13b', '26b', '53b', '107b', '214b', '429b', '858b', '1c', '3c', '6c', '13c', '27c', '54c', '109c', '219c', '439c', '879c', '1d', '3d', '7d', '14d', '28d', '56d', '112d', '225d', '450d', '900d', '1f', '3f', '7f', '14f', '28f', '57f', '115f', '230f', '461f', '922f', '1e', '3e', '7e', '14e', '29e', '59e', '118e', '236e', '472e', '944e', '1g', '3g', '7g', '15g', '30g', '60g', '120g', '241g', '483g', '967g', '1h', '3h', '7h', '15h', '30h', '61h', '123h', '247h', '495h', '990h', '1i', '3i', '7i', '15i', '31i', '63i', '126i', '253i', '507i', '1j', '2j', '4j', '8j', '16j', '32j', '64j', '129j', '259j', '519j', '1k', '2k', '4k', '8k', '16k', '33k', '66k', '132k', '265k', '531k', '1l', '2l', '4l', '8l', '17l', '34l', '68l', '136l', '272l', '544l', '1m', '2m', '4m', '8m', '17m', '34m', '69m', '139m', '278m', '557m', '1n', '2n', '4n', '8n', '17n', '35n', '71n', '142n', '285n', '570n', '1o', '2o', '4o', '9o', '18o', '36o', '73o', '146o', '292o', '584o', '1p', '2p', '4p', '9p', '18p', '37p', '74p', '149p', '299p', '598p', '1q', '2q', '4q', '9q', '19q', '38q', '76q', '153q', '306q', '612q', '1r', '2r', '4r', '9r', '19r', '39r', '78r', '156r', '313r', '627r', '1s', '2s', '5s', '10s', '20s', '40s', '80s', '160s', '321s', '642s', '1t', '2t', '5t', '10t', '20t', '41t', '82t', '164t', '329t', '658t', '1u', '2u', '5u', '10u', '21u', '42u', '84u', '168u', '336u', '673u', '1v', '2v', '5v', '10v', '21v', '43v', '86v', '172v', '345v', '690v', '1w', '2w', '5w', '11w', '22w', '44w', '88w', '176w', '353w', '706w', '1x', '2x', '5x', '11x', '22x', '45x', '90x', '180x', '361x', '723x', '1y', '2y', '5y', '11y', '23y', '46y', '92y', '185y', '370y', '741y', '1z', '2z', '5z', '11z', '23z', '47z', '94z', '189z', '379z', '758z', '1A', '3A', '6A', '12A', '24A', '48A', '97A', '194A', '388A', '777A', '1B', '3B', '6B', '12B', '24B', '49B', '99B', '198B', '397B', '795B', '1C', '3C', '6C', '12C', '25C', '50C', '101C', '203C', '407C', '814C', '1D', '3D', '6D', '13D', '26D', '52D', '104D', '208D', '417D', '834D', '1E', '3E', '6E', '13E', '26E', '53E', '106E', '213E', '427E', '854E', '1F', '3F', '6F', '13F', '27F', '54F', '109F', '218F', '437F', '874F', '1G', '3G', '6G', '13G', '27G', '55G', '111G', '223G', '447G', '895G', '1H', '3H', '7H', '14H', '28H', '57H', '114H', '229H', '458H', '917H', '1I', '3I', '7I', '14I', '29I', '58I', '117I', '234I', '469I', '939I', '1J', '3J', '7J', '15J', '30J', '60J', '120J', '240J', '480J', '961J', '1K', '3K', '7K', '15K', '30K', '61K', '123K', '246K', '492K', '985K', '1L', '3L', '7L', '15L', '31L', '63L', '126L', '252L', '504L', '1M', '2M', '4M', '8M', '16M', '32M', '64M', '129M', '258M', '516M', '1N', '2N', '4N', '8N', '16N', '33N', '66N', '132N', '264N', '528N', '1O', '2O', '4O', '8O', '16O', '33O', '67O', '135O', '270O', '541O', '1P', '2P', '4P', '8P', '17P', '34P', '69P', '138P', '277P', '554P', '1Q', '2Q', '4Q', '8Q', '17Q', '35Q', '70Q', '141Q', '283Q', '567Q', '1R', '2R', '4R', '9R', '18R', '36R', '72R', '145R', '290R', '581R', '1S', '2S', '4S', '9S', '18S', '37S', '74S', '148S', '297S', '595S', '1T', '2T', '4T', '9T', '19T', '38T', '76T', '152T', '304T', '609T', '1U', '2U', '4U', '9U', '19U', '39U', '78U', '156U', '312U', '624U', '1V', '2V', '4V', '9V', '19V', '39V', '79V', '159V', '319V', '639V', '1W', '2W', '5W', '10W', '20W', '40W', '81W', '163W', '327W', '654W', '1X', '2X', '5X', '10X', '20X', '41X', '83X', '167X', '335X', '670X', '1Y', '2Y', '5Y', '10Y', '21Y', '42Y', '85Y', '171Y', '343Y', '686Y', '1Z', '2Z', '5Z', '10Z', '21Z', '43Z', '87Z', '175Z', '351Z', '702Z', '∞']

    def translateStrToData(self, string):
        if string == "":
            return Data(string, -1)
        return Data(string, self.dataIndex.index(string))

    def getDataRange(self, gameSave: list[list[chessboard.ChessBlock]]):
        '''
        反正就是最大的值，从它往前10个是场上的范围，生成的范围是前5个
        1、2、4、8、16、32、64、128、256、512、1024，场上最大是1024的时候，只生成32及以前的

        总共有533个数，把这689个数全写出来，直接查。计算的话56次除1000的运算，float的16位小数根本顶不住这个精度损失，空间换时间吧
        '''

        # 1.找到场上所有数字里最大的
        maxValueIndex = max([b.index for line in gameSave for b in line])
        dataRange = [1, 6]
        if maxValueIndex > 10:
            dataRange[1] = maxValueIndex - 4
            dataRange[0] = maxValueIndex - 10

        return dataRange

    def getRandomDataFromRange(self, dataRange):
        randomIndex = random.randint(dataRange[0], dataRange[1])
        return Data(self.dataIndex[randomIndex], randomIndex)



